<!DOCTYPE html>
<html>
  <head>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">


    <style>

    </style>
    <br>
    <br>
    <br>
    <div class="container">
    <strong style="font-size: xx-large;">Q-Pon</strong>
    <br>
    <p>Redeem your coins for dining coupons.</p>
    </div>
    <br>
    <br>
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    
    <nav class="navbar is-fixed-top" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <a class="navbar-item" href="http://localhost:1337/qpon/homepage">
          <img src="https://pbs.twimg.com/profile_images/1208433111/Qpon_Logo.png" width="112" height="28">
        </a>
    
        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbar" onclick="Clicked()">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>
    
      <div id="navbar" class="navbar-menu">
        <div class="navbar-start">
          <a class="navbar-item" href="http://localhost:1337/qpon/homepage">
            Home
          </a>
    
          <a class="navbar-item" href="http://localhost:1337/qpon/search">
            Search
          </a>
          
          <% if(req.session.role == "admin") { %>
            <a class="navbar-item" href="http://localhost:1337/qpon/create">
              Create
            </a>
            
  
            <a class="navbar-item" href="http://localhost:1337/qpon/admin">
              Admin
            </a>
            
            <%} else if(req.session.role == "member"){ %>
              <a class="navbar-item" href="http://localhost:1337/qpon/redeemed">
                My Redeemed Coupons
              </a>
              <%} else { %>
  
  
                <% } %>

          </div>
        </div>
    
        <div class="navbar-end">
          <div class="navbar-item  is-hidden-mobile">
            <% if(req.session.role == "admin" || req.session.role == "member") { %>
              <h1>Hi, <%= req.session.username %> </h1>
              <a class="button is-light" href="http://localhost:1337/user/logout" onclick="logout()">
                Log out
              </a>
              <%} else { %>
            <div class="buttons">
              <a class="button is-primary">
                <strong>Sign up</strong>
              </a>
              <a class="button is-light" href="http://localhost:1337/user/login">
                Log in
              </a>
            </div>
            <% } %>
          </div>
        </div>
      </div>
    </nav>

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>
  </body>
</html>

<script>
function Clicked() {

  var figure = document.querySelector(".navbar-menu");
  var figure2 = document.querySelector(".navbar-burger");
  
  if(figure.className=="navbar-menu"){
    figure.className="navbar-menu is-active";
    figure2.className="navbar-burger burger is-active";
  }
  else{
    figure.classList.remove("is-active");
    figure2.classList.remove("is-active");
  }
};


async function logout() {
    var r = confirm("Logout?");
            
    if (r) {
        var response = await fetch("/user/logout", {
        method: "POST",
    });
    
    if (response.ok) {
        //var html = await response.text();
        //alert(html);

        alert("Logouted.");
        location.assign("/qpon/homepage");
    } else {
        alert(response.status + ": " + response.statusText);
    }
    
    } else {
        alert("cancelled");
    }
};

</script>





